"""Initial migration

Revision ID: 60d26f3512ab
Revises: 
Create Date: 2025-10-30 01:22:14.901051

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '60d26f3512ab'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('shop',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('shop_domain', sa.String(length=255), nullable=False),
    sa.Column('access_token', sa.Text(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('shop_domain')
    )
    op.create_table('order_sync',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('shop_id', sa.Integer(), nullable=False),
    sa.Column('order_id', sa.BigInteger(), nullable=False),
    sa.Column('order_number', sa.String(length=50), nullable=False),
    sa.Column('status', sa.String(length=50), nullable=False),
    sa.Column('total_price', sa.Float(), nullable=False),
    sa.Column('currency', sa.String(length=10), nullable=False),
    sa.Column('last_synced', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['shop_id'], ['shop.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('product_sync',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('shop_id', sa.Integer(), nullable=False),
    sa.Column('product_id', sa.BigInteger(), nullable=False),
    sa.Column('title', sa.String(length=255), nullable=False),
    sa.Column('handle', sa.String(length=255), nullable=False),
    sa.Column('status', sa.String(length=50), nullable=True),
    sa.Column('last_synced', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['shop_id'], ['shop.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.drop_table('app_kv')
    op.drop_table('vault_campaigns')
    with op.batch_alter_table('reward_denominations', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('idx_vault_denominations_denomination'))
        batch_op.drop_index(batch_op.f('idx_vault_denominations_is_active'))
        batch_op.drop_index(batch_op.f('idx_vault_denominations_vault_id'))

    op.drop_table('reward_denominations')
    with op.batch_alter_table('vouchers', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('vouchers_code_uk'))
        batch_op.drop_index(batch_op.f('vouchers_expiry_date_idx'))
        batch_op.drop_index(batch_op.f('vouchers_is_redeemed_idx'))
        batch_op.drop_index(batch_op.f('vouchers_vault_id_idx'))

    op.drop_table('vouchers')
    with op.batch_alter_table('reward_inventory', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('vault_inventory_blocked_idx'))
        batch_op.drop_index(batch_op.f('vault_inventory_on_hold_idx'))
        batch_op.drop_index(batch_op.f('vault_inventory_redeemed_idx'))
        batch_op.drop_index(batch_op.f('vault_inventory_total_idx'))
        batch_op.drop_index(batch_op.f('vault_inventory_vault_id_uk'))

    op.drop_table('reward_inventory')
    with op.batch_alter_table('partners', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('partners_name_is_active_lower_uk'))

    op.drop_table('partners')
    with op.batch_alter_table('reward_infos', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('idx_vault_infos_category_id'))
        batch_op.drop_index(batch_op.f('idx_vault_infos_created_at'))
        batch_op.drop_index(batch_op.f('idx_vault_infos_currency_code'))
        batch_op.drop_index(batch_op.f('idx_vault_infos_partner_id'))
        batch_op.drop_index(batch_op.f('idx_vault_infos_status'))
        batch_op.drop_index(batch_op.f('idx_vault_infos_type'))

    op.drop_table('reward_infos')
    with op.batch_alter_table('vault_users_mapping', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('idx_vault_users_mapping_user_id'))
        batch_op.drop_index(batch_op.f('idx_vault_users_mapping_vault_id'))

    op.drop_table('vault_users_mapping')
    with op.batch_alter_table('categories', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('categories_name_lower_uk'))
        batch_op.drop_index(batch_op.f('idx_categories_is_active'))
        batch_op.drop_index(batch_op.f('idx_categories_parent_id'))

    op.drop_table('categories')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('categories',
    sa.Column('id', sa.BIGINT(), server_default=sa.text("nextval('categories_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('parent_id', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('display_name', sa.VARCHAR(length=150), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['parent_id'], ['categories.id'], name='categories_parent_fk', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name='categories_pkey'),
    postgresql_ignore_search_path=False
    )
    with op.batch_alter_table('categories', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('idx_categories_parent_id'), ['parent_id'], unique=False)
        batch_op.create_index(batch_op.f('idx_categories_is_active'), ['is_active'], unique=False)
        batch_op.create_index(batch_op.f('categories_name_lower_uk'), [sa.literal_column('lower(name::text)')], unique=True)

    op.create_table('vault_users_mapping',
    sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('vault_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('vault_info', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('claimed_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('vault_users_mapping_pkey'))
    )
    with op.batch_alter_table('vault_users_mapping', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('idx_vault_users_mapping_vault_id'), ['vault_id'], unique=False)
        batch_op.create_index(batch_op.f('idx_vault_users_mapping_user_id'), ['user_id'], unique=False)

    op.create_table('reward_infos',
    sa.Column('id', sa.BIGINT(), server_default=sa.text("nextval('vault_infos_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('partner_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('category_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('title', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('cooldowntime', sa.SMALLINT(), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('reward_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('denomination_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('currency_code', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('offer_has_code', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('discount_value', sa.NUMERIC(precision=12, scale=2), autoincrement=False, nullable=True),
    sa.Column('discount_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('sharing_info_object', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('applicable_at', sa.VARCHAR(length=30), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['category_id'], ['categories.id'], name='vault_infos_category_fk', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['partner_id'], ['partners.id'], name='vault_infos_partner_fk', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name='vault_infos_pkey'),
    postgresql_ignore_search_path=False
    )
    with op.batch_alter_table('reward_infos', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('idx_vault_infos_type'), ['reward_type'], unique=False)
        batch_op.create_index(batch_op.f('idx_vault_infos_status'), ['status'], unique=False)
        batch_op.create_index(batch_op.f('idx_vault_infos_partner_id'), ['partner_id'], unique=False)
        batch_op.create_index(batch_op.f('idx_vault_infos_currency_code'), ['currency_code'], unique=False)
        batch_op.create_index(batch_op.f('idx_vault_infos_created_at'), ['created_at'], unique=False)
        batch_op.create_index(batch_op.f('idx_vault_infos_category_id'), ['category_id'], unique=False)

    op.create_table('partners',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('partners_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('partner_id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('website_url', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('logo_url', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='partners_pkey'),
    sa.UniqueConstraint('partner_id', name='partners_partner_id_uk', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    with op.batch_alter_table('partners', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('partners_name_is_active_lower_uk'), [sa.literal_column('lower(name::text)'), 'is_active'], unique=True)

    op.create_table('reward_inventory',
    sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False, comment='Primary key'),
    sa.Column('reward_dem_id', sa.BIGINT(), autoincrement=False, nullable=False, comment='Foreign key to vault_denominations table'),
    sa.Column('total', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False, comment='Total inventory quantity'),
    sa.Column('redeemed', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False, comment='Number of items redeemed'),
    sa.Column('blocked', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False, comment='Number of items blocked from use'),
    sa.Column('on_hold', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False, comment='Number of items on hold'),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False, comment='Record last update timestamp'),
    sa.CheckConstraint('(redeemed + blocked + on_hold) <= total', name=op.f('vault_inventory_balance_check')),
    sa.CheckConstraint('total >= 0 AND redeemed >= 0 AND blocked >= 0 AND on_hold >= 0', name=op.f('vault_inventory_non_negative_check')),
    sa.ForeignKeyConstraint(['reward_dem_id'], ['reward_denominations.id'], name=op.f('vault_inventory_vault_denomination_fk'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('vault_inventory_pkey')),
    comment='Tracks inventory quantities for vault denominations'
    )
    with op.batch_alter_table('reward_inventory', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('vault_inventory_vault_id_uk'), ['reward_dem_id'], unique=True)
        batch_op.create_index(batch_op.f('vault_inventory_total_idx'), ['total'], unique=False)
        batch_op.create_index(batch_op.f('vault_inventory_redeemed_idx'), ['redeemed'], unique=False)
        batch_op.create_index(batch_op.f('vault_inventory_on_hold_idx'), ['on_hold'], unique=False)
        batch_op.create_index(batch_op.f('vault_inventory_blocked_idx'), ['blocked'], unique=False)

    op.create_table('vouchers',
    sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False, comment='Primary key'),
    sa.Column('reward_dem_id', sa.BIGINT(), autoincrement=False, nullable=False, comment='Foreign key to vault_denominations table'),
    sa.Column('code', sa.VARCHAR(length=255), autoincrement=False, nullable=False, comment='Unique redemption code'),
    sa.Column('passcode', sa.VARCHAR(length=255), autoincrement=False, nullable=True, comment='Optional passcode for additional security'),
    sa.Column('is_redeemed', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False, comment='Whether the voucher has been redeemed'),
    sa.Column('redeemed_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True, comment='Timestamp when the voucher was redeemed'),
    sa.Column('expiry_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False, comment='Expiration date for the voucher'),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False, comment='Record last update timestamp'),
    sa.ForeignKeyConstraint(['reward_dem_id'], ['reward_denominations.id'], name=op.f('vouchers_vault_denomination_fk'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('vouchers_pkey')),
    comment='Stores redemption codes/vouchers for vault denominations'
    )
    with op.batch_alter_table('vouchers', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('vouchers_vault_id_idx'), ['reward_dem_id'], unique=False)
        batch_op.create_index(batch_op.f('vouchers_is_redeemed_idx'), ['is_redeemed'], unique=False)
        batch_op.create_index(batch_op.f('vouchers_expiry_date_idx'), ['expiry_date'], unique=False)
        batch_op.create_index(batch_op.f('vouchers_code_uk'), ['code'], unique=True)

    op.create_table('reward_denominations',
    sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('reward_id', sa.BIGINT(), autoincrement=False, nullable=False, comment='Reference to vault_infos table'),
    sa.Column('denomination', sa.VARCHAR(length=100), autoincrement=False, nullable=False, comment='Denomination name (e.g., $10, $20, $50)'),
    sa.Column('value', sa.NUMERIC(precision=12, scale=2), autoincrement=False, nullable=False, comment='Numeric value of the denomination'),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('tags', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True),
    sa.Column('max_redeem_per_user', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('expire_in', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['reward_id'], ['reward_infos.id'], name=op.f('vault_denominations_vault_fk'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('vault_denominations_pkey')),
    sa.UniqueConstraint('reward_id', 'denomination', 'is_active', name=op.f('vault_denominations_vaultid_denom_isactive_unique'), postgresql_include=[], postgresql_nulls_not_distinct=False),
    comment='Maps vaults to their available denominations'
    )
    with op.batch_alter_table('reward_denominations', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('idx_vault_denominations_vault_id'), ['reward_id'], unique=False)
        batch_op.create_index(batch_op.f('idx_vault_denominations_is_active'), ['is_active'], unique=False)
        batch_op.create_index(batch_op.f('idx_vault_denominations_denomination'), ['denomination'], unique=False)

    op.create_table('vault_campaigns',
    sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('vault_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('start_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('end_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('tags', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['vault_id'], ['reward_infos.id'], name=op.f('vault_tags_vault_fk'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('vault_campaigns_pkey'))
    )
    op.create_table('app_kv',
    sa.Column('k', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('v', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('k', name=op.f('app_kv_pkey'))
    )
    op.drop_table('product_sync')
    op.drop_table('order_sync')
    op.drop_table('shop')
    # ### end Alembic commands ###
